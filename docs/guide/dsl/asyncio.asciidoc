[[asyncio]]
==== Using asyncio with Elasticsearch Python DSL

The DSL module supports async/await with
https://docs.python.org/3/library/asyncio.html[asyncio]. To ensure that
you have all the required dependencies, install the `[async]`
extra:

[source,bash]
----
$ python -m pip install "elasticsearch[async]"
----

===== Connections

Use the `async_connections` module to manage your asynchronous
connections.

[source,python]
----
from elasticsearch.dsl import async_connections

async_connections.create_connection(hosts=['localhost'], timeout=20)
----

All the options available in the `connections` module can be used with
`async_connections`.

====== How to avoid 'Unclosed client session / connector' warnings on exit

These warnings come from the `aiohttp` package, which is used internally
by the `AsyncElasticsearch` client. They appear often when the
application exits and are caused by HTTP connections that are open when
they are garbage collected. To avoid these warnings, make sure that you
close your connections.

[source,python]
----
es = async_connections.get_connection()
await es.close()
----

===== Search DSL

Use the `AsyncSearch` class to perform asynchronous searches.

[source,python]
----
from elasticsearch.dsl import AsyncSearch

s = AsyncSearch().query("match", title="python")
async for hit in s:
    print(hit.title)
----

Instead of using the `AsyncSearch` object as an asynchronous iterator,
you can explicitly call the `execute()` method to get a `Response`
object.

[source,python]
----
s = AsyncSearch().query("match", title="python")
response = await s.execute()
for hit in response:
    print(hit.title)
----

An `AsyncMultiSearch` is available as well.

[source,python]
----
from elasticsearch.dsl import AsyncMultiSearch

ms = AsyncMultiSearch(index='blogs')

ms = ms.add(AsyncSearch().filter('term', tags='python'))
ms = ms.add(AsyncSearch().filter('term', tags='elasticsearch'))

responses = await ms.execute()

for response in responses:
    print("Results for query %r." % response.search.query)
    for hit in response:
        print(hit.title)
----

===== Asynchronous Documents, Indexes, and more

The `Document`, `Index`, `IndexTemplate`, `Mapping`, `UpdateByQuery` and
`FacetedSearch` classes all have asynchronous versions that use the same
name with an `Async` prefix. These classes expose the same interfaces as
the synchronous versions, but any methods that perform I/O are defined
as coroutines.

Auxiliary classes that do not perform I/O do not have asynchronous
versions. The same classes can be used in synchronous and asynchronous
applications.

When using a custom analyzer in an asynchronous
application, use the `async_simulate()` method to invoke the Analyze
API on it.

Consult the `api` section for details about each specific method.
