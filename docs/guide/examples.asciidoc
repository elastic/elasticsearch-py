[[examples]]
== Examples

Below you can find examples of how to use the most frequently called APIs with 
the Python client.

* <<ex-index>>
* <<ex-get>>
* <<ex-refresh>>
* <<ex-search>>
* <<ex-update>>
* <<ex-delete>>

[discrete]
[[ex-index]]
=== Indexing a document
  
To index a document, you need to specify three pieces of information: `index`, 
`id`, and a `document`:

[source,py]
----------------------------
from datetime import datetime
from elasticsearch import Elasticsearch
client = Elasticsearch('https://localhost:9200')

doc = {
    'author': 'author_name',
    'text': 'Interesting content...',
    'timestamp': datetime.now(),
}
resp = client.index(index="test-index", id=1, document=doc)
print(resp['result'])
----------------------------


[discrete]
[[ex-get]]
=== Getting a document 

To get a document, you need to specify its `index` and `id`:

[source,py]
----------------------------
resp = client.get(index="test-index", id=1)
print(resp['_source'])
----------------------------


[discrete]
[[ex-refresh]]
=== Refreshing an index

You can perform the refresh operation on an index:

[source,py]
----------------------------
client.indices.refresh(index="test-index")
----------------------------


[discrete]
[[ex-search]]
=== Searching for a document

The `search()` method returns results that are matching a query:

[source,py]
----------------------------
resp = client.search(index="test-index", query={"match_all": {}})
print("Got %d Hits:" % resp['hits']['total']['value'])
for hit in resp['hits']['hits']:
    print("%(timestamp)s %(author)s: %(text)s" % hit["_source"])
----------------------------


[discrete]
[[ex-update]]
=== Updating a document

To update a document, you need to specify three pieces of information: `index`, 
`id`, and a `doc`:

[source,py]
----------------------------
from datetime import datetime
from elasticsearch import Elasticsearch

client = Elasticsearch('https://localhost:9200')

doc = {
    'author': 'author_name',
    'text': 'Interesting modified content...',
    'timestamp': datetime.now(),
}
resp = client.update(index="test-index", id=1, doc=doc)
print(resp['result'])
----------------------------


[discrete]
[[ex-delete]]
=== Deleting a document

You can delete a document by specifying its `index`, and `id` in the `delete()` 
method:

[source,py]
----------------------------
client.delete(index="test-index", id=1)
----------------------------

[discrete]
[[ex-interactive]]
=== Interactive examples

The https://github.com/elastic/elasticsearch-labs[elasticsearch-labs]
repo contains interactive and executable
https://github.com/elastic/elasticsearch-labs/tree/main/notebooks[Python
notebooks], sample apps, and resources for testing out Elasticsearch,
using the Python client. These examples are mainly focused on vector
search, hybrid search and generative AI use cases, but you'll also find
examples of basic operations like creating index mappings and performing
lexical search.

[discrete]
==== Search notebooks

The
https://github.com/elastic/elasticsearch-labs/tree/main/notebooks/search[Search]
folder is a good place to start if you're new to Elasticsearch. This
folder contains a number of notebooks that demonstrate the fundamentals
of Elasticsearch, like indexing vectors, running lexical, semantic and
_hybrid_ searches, and more.

The following notebooks are available:

[arabic, start=0]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/00-quick-start.ipynb[Quick
start]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/01-keyword-querying-filtering.ipynb[Keyword&#44;
querying&#44; filtering]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/02-hybrid-search.ipynb[Hybrid
search]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/03-ELSER.ipynb[Semantic
search with ELSER]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/04-multilingual.ipynb[Multilingual
semantic search]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/05-query-rules.ipynb[Query
rules]
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/06-synonyms-api.ipynb[Synonyms
API quick start]

Here's a brief overview of what you'll learn in each notebook.

[discrete]
===== Quick start

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/00-quick-start.ipynb[00-quick-start.ipynb]
notebook you'll learn how to:

* Use the Elasticsearch Python client for various operations.
* Create and define an index for a sample dataset with
`dense_vector` fields.
* Transform book titles into embeddings using
https://www.sbert.net[Sentence Transformers] and index them into
Elasticsearch.
* Perform k-nearest neighbors (knn) semantic searches.
* Integrate traditional text-based search with semantic search, for a
hybrid search system.
* Use reciprocal rank fusion (RRF) to intelligently combine search
results from different retrieval systems.

[discrete]
===== Keyword, querying, filtering

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/01-keyword-querying-filtering.ipynb[01-keyword-querying-filtering.ipynb]
notebook, you'll learn how to:

* Use
https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html[query
and filter contexts] to search and filter documents in Elasticsearch.
* Execute full-text searches with `match` and `multi-match` queries.
* Query and filter documents based on `text`, `number`, `date`, or
`boolean` values.
* Run multi-field searches using the `multi-match` query.
* Prioritize specific fields in the `multi-match` query for tailored
results.

[discrete]
===== Hybrid search

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/02-hybrid-search.ipynb[02-hybrid-search.ipynb]
notebook, you'll learn how to:

* Combine results of traditional text-based search with semantic search,
for a hybrid search system.
* Transform fields in the sample dataset into embeddings using the
Sentence Transformer model and index them into Elasticsearch.
* Use the
https://www.elastic.co/guide/en/elasticsearch/reference/current/rrf.html#rrf-api[RRF
API] to combine the results of a `match` query and a `kNN` semantic
search.
* Walk through a super simple toy example that demonstrates, step by
step, how RRF ranking works.

[discrete]
===== Semantic search with ELSER

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/03-ELSER.ipynb[03-ELSER.ipynb]
notebook, you'll learn how to:

* Use the Elastic Learned Sparse Encoder (ELSER) for text
expansion-powered semantic search, out of the box â€” without training,
fine-tuning, or embeddings generation.
* Download and deploy the ELSER model in your Elastic environment.
* Create an Elasticsearch index named [.title-ref]#search-movies# with
specific mappings and index a dataset of movie descriptions.
* Create an ingest pipeline containing an inference processor for ELSER
model execution.
* Reindex the data from [.title-ref]#search-movies# into another index,
[.title-ref]#elser-movies#, using the ELSER pipeline for text expansion.
* Observe the results of running the documents through the model by
inspecting the additional terms it adds to documents, which enhance
searchability.
* Perform simple keyword searches on the [.title-ref]#elser-movies#
index to assess the impact of ELSER's text expansion.
* Execute ELSER-powered semantic searches using the `text_expansion`
query.

[discrete]
===== Multilingual semantic search

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/04-multilingual.ipynb[04-multilingual.ipynb]
notebook, you'll learn how to:

* Use a multilingual embedding model for semantic search across
languages.
* Transform fields in the sample dataset into embeddings using the
Sentence Transformer model and index them into Elasticsearch.
* Use filtering with a `kNN` semantic search.
* Walk through a super simple toy example that demonstrates, step by
step, how multilingual search works across languages, and within
non-English languages.

[discrete]
===== Query rules

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/05-query-rules.ipynb[05-query-rules.ipynb]
notebook, you'll learn how to:

* Use the query rules management APIs to create and edit promotional
rules based on contextual queries.
* Apply these query rules by using the `rule_query` in Query DSL.

[discrete]
===== Synonyms API quick start

In the
https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/search/06-synonyms-api.ipynb[06-synonyms-api.ipynb]
notebook, you'll learn how to:

* Use the synonyms management API to create a synonyms set to enhance
your search recall.
* Configure an index to use search-time synonyms.
* Update synonyms in real time.
* Run queries that are enhanced by synonyms.

[discrete]
==== Other notebooks

* https://github.com/elastic/elasticsearch-labs/tree/main/notebooks/generative-ai[Generative
AI]. Notebooks that demonstrate various use cases for Elasticsearch as
the retrieval engine and vector store for LLM-powered applications.
* https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/integrations[Integrations].
Notebooks that demonstrate how to integrate popular services and
projects with Elasticsearch, including OpenAI, Hugging Face, and
LlamaIndex
* https://github.com/elastic/elasticsearch-labs/tree/main/notebooks/langchain[Langchain].
Notebooks that demonstrate how to integrate Elastic with LangChain, a
framework for developing applications powered by language models.
